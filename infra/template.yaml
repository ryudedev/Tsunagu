AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  TsunaguApp

# パラメータを追加してURLを柔軟に設定
Parameters:
  AppURL:
    Type: String
    Default: "http://localhost:3000"
    Description: "The URL of the frontend application"

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    Handler: app.lambda_handler
    Runtime: python3.9
    LoggingConfig:
      LogFormat: JSON
    # 共通の環境変数をここに定義
    Environment:
      Variables:
        POSTS_TABLE_NAME: !Ref PostsTable
        USER_POOL_ID: !Ref TsunaguUserPool
  Api:
    # グローバルなCORS設定
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: !Sub "'${AppURL}'" # <--- 変更点: パラメータを使用
      AllowCredentials: true
    # Gateway Response を追加してエラー時の CORS を設定
    GatewayResponses:
      UNAUTHORIZED:
        StatusCode: 401
        ResponseParameters:
          Headers:
            Access-Control-Allow-Origin: !Sub "'${AppURL}'" # <--- 変更点: パラメータを使用
            Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            Access-Control-Allow-Credentials: "'true'" # <--- 変更点: trueに設定
      ACCESS_DENIED:
        StatusCode: 403
        ResponseParameters:
          Headers:
            Access-Control-Allow-Origin: !Sub "'${AppURL}'" # <--- 変更点: パラメータを使用
            Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
            Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            Access-Control-Allow-Credentials: "'true'" # <--- 変更点: trueに設定

Resources:
  # Cognito
  TsunaguUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: TsunaguUserPool
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: false
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
  
  TsunaguUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "tsunagu-app-${AWS::AccountId}-${AWS::Region}"
      UserPoolId: !Ref TsunaguUserPool
  
  TsunaguGoogleIdP:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      ProviderName: Google
      ProviderType: Google
      UserPoolId: !Ref TsunaguUserPool
      ProviderDetails:
        client_id: "{{resolve:secretsmanager:TsunaguGoogleSecrets:SecretString:google-client-id}}"
        client_secret: "{{resolve:secretsmanager:TsunaguGoogleSecrets:SecretString:google-client-secret}}"
        authorize_scopes: "profile email openid"
      AttributeMapping:
        email: "email"
        username: "sub"
        name: "name"

  TsunaguUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: TsunaguGoogleIdP
    Properties:
      UserPoolId: !Ref TsunaguUserPool
      ClientName: TsunaguWebClient
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
        - Google
      CallbackURLs:
        - !Ref AppURL # <--- 変更点: パラメータを使用
      LogoutURLs:
        - !Sub "${AppURL}/login"
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      AllowedOAuthFlowsUserPoolClient: true
      RefreshTokenValidity: 30
      AccessTokenValidity: 60
      IdTokenValidity: 60
      TokenValidityUnits:
        RefreshToken: days
        AccessToken: minutes
        IdToken: minutes
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      WriteAttributes:
        - email
        - name
      ReadAttributes:
        - email
        - name

  # DynamoDB
  PostsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Posts
      BillingMode: 'PAY_PER_REQUEST'
      AttributeDefinitions:
        - AttributeName: postId
          AttributeType: S
      KeySchema:
        - AttributeName: postId
          KeyType: HASH
  
  # API Gateway
  TsunaguApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev
      Auth:
        DefaultAuthorizer: TsunaguApiAuthorizer
        Authorizers:
          TsunaguApiAuthorizer:
            FunctionArn: !GetAtt ApiAuthorizerFunction.Arn
            Identity:
              Headers:
                - Authorization

  # Lambda
  ApiAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/authorizer/
      # <--- 変更点: ここから ---
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - cognito-idp:GetUser
            Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${TsunaguUserPool}"
      # <--- 変更点: ここまで ---

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/hello_world/
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            RestApiId: !Ref TsunaguApiGateway
            Path: /ping
            Method: get
            Auth:
              Authorizer: NONE

  GetPostsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/getPosts/
      Architectures:
        - x86_64
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PostsTable
      Events:
        GetPosts:
          Type: Api
          Properties:
            RestApiId: !Ref TsunaguApiGateway
            Path: /posts
            Method: get
            # DefaultAuthorizerが適用されるためAuthセクションは不要
        PostsOptions:
          Type: Api
          Properties:
            RestApiId: !Ref TsunaguApiGateway
            Path: /posts
            Method: options
            Auth:
              Authorizer: NONE
            
  CreatePostsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/createPosts/
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PostsTable
      Events:
        CreatePosts:
          Type: Api
          Properties:
            RestApiId: !Ref TsunaguApiGateway
            Path: /posts
            Method: post
            # DefaultAuthorizerが適用されるためAuthセクションは不要
        # <--- 変更点: グローバルのCORS設定と重複するため、手動のOPTIONSイベントは削除

Outputs:
  TsunaguApiEndpoint:
    Description: "API Gateway endpoint URL for Dev stage"
    Value: !Sub "https://${TsunaguApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Dev"
  
  TsunaguUserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref TsunaguUserPool

  TsunaguUserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref TsunaguUserPoolClient

  TsunaguUserPoolDomain:
    Description: "Cognito User Pool Domain"
    Value: !Sub "https://tsunagu-app-${AWS::AccountId}-${AWS::Region}.auth.${AWS::Region}.amazoncognito.com"

  EnvironmentVariables:
    Description: "Environment variables for frontend application"
    Value: !Sub |
      NEXT_PUBLIC_COGNITO_USER_POOL_ID=${TsunaguUserPool}
      NEXT_PUBLIC_COGNITO_USER_POOL_CLIENT_ID=${TsunaguUserPoolClient}
      NEXT_PUBLIC_COGNITO_DOMAIN=tsunagu-app-${AWS::AccountId}-${AWS::Region}.auth.${AWS::Region}.amazoncognito.com
      NEXT_PUBLIC_APP_URL=${AppURL}